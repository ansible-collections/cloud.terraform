name: Integration tests

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - labeled
      - unlabeled
      - synchronize
    branches:
      - main
      - stable-*

jobs:
  safe-to-test:
    if: ${{ github.event.label.name == 'safe to test' }} || ${{ github.event.action != 'labeled' }}
    uses: ansible-network/github_actions/.github/workflows/safe-to-test.yml@main

  splitter:
    needs:
      - safe-to-test
    env:
      source_dir: "./source"
    runs-on: ubuntu-latest
    outputs:
      ids: ${{ steps.split.outputs.ids }}
      targets: ${{ steps.split.outputs.targets }}
    steps:
      - name: Checkout the collection repository
        uses: actions/checkout@v3
        with:
          path: ${{ env.source_dir }}

      - name: List tests targets
        id: split
        shell: python
        run: |
          from pathlib import PosixPath
          import os
          import json
          from collections import defaultdict

          all_targets = defaultdict(list)
          index = 0
          total_jobs = int(os.environ["TOTAL_JOBS"])
          for target in PosixPath(os.path.join(os.environ['COLLECTION_PATH'], "tests/integration/targets")).glob("*"):
              aliases = (target / PosixPath("aliases"))
              if aliases.exists() and any([line.startswith(("unsupported", "disabled")) for line in aliases.read_text().splitlines()]):
                  continue
              all_targets[index % total_jobs].append(target.stem)
              index += 1
          with open(os.environ.get("GITHUB_OUTPUT"), "a", encoding="utf-8") as fw:
              fw.write(f"ids={list(all_targets.keys())}\n")
              fw.write(f"targets={json.dumps(dict(all_targets))}\n")
        env:
          COLLECTION_PATH: ${{ env.source_dir }}
          TOTAL_JOBS: 5

  integration-tests:
    needs:
      - splitter
    runs-on: ubuntu-latest
    env:
      source: "./source"
      ansible_version: "devel"
      python_version: "3.12"
    strategy:
      fail-fast: false
      matrix:
        run-id: ${{ fromJson(needs.splitter.outputs.ids) }}
    name: "integration-tests-${{ matrix.run-id }}"
    steps:
      - name: Checkout collection
        uses: actions/checkout@v4
        with:
          path: ${{ env.source }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python ${{ env.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}

      - name: Install ansible-core (${{ env.ansible_version }})
        run: >-
          python3 -m pip install
          https://github.com/ansible/ansible/archive/${{ env.ansible_version }}.tar.gz
        shell: bash

      - name: Pre install collections dependencies first so the collection install does not
        run: >-
          ansible-galaxy collection install
          --pre "-r${{ env.source }}/tests/integration/requirements.yml"
          -p /home/runner/collections/
        shell: bash

      - name: Build and install collection
        id: install-collection
        uses: ansible-network/github_actions/.github/actions/build_install_collection@main
        with:
          install_python_dependencies: true
          source_path: ${{ env.source }}

      - name: Install Terraform binary
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: "1.6.3"

      - name: Create AWS/sts session credentials
        uses: ansible-network/github_actions/.github/actions/ansible_aws_test_provider@main
        with:
          collection_path: ${{ steps.install-collection.outputs.collection_path }}
          ansible_core_ci_key: ${{ secrets.ANSIBLE_CORE_CI_KEY }}

      - name: Create AzureRM session credentials
        uses: ansible-network/github_actions/.github/actions/ansible_azure_test_provider@main
        with:
          collection_path: ${{ steps.install-collection.outputs.collection_path }}
          ansible_core_ci_key: ${{ secrets.ANSIBLE_CORE_CI_KEY }}

      # we use raw git to create a repository in the tests
      # this fails if the committer doesn't have a name and an email set
      - name: Set up git
        run: |
          git config --global user.email gha@localhost
          git config --global user.name "Github Actions"
        shell: bash

      - name: Read test targets
        id: read-targets
        run: |
          import json, os
          with open(os.environ.get('GITHUB_OUTPUT'), "a", encoding="utf-8") as fh:
              fh.write(f'ansible_test_targets={json.loads(os.environ.get("ALL_TEST_TARGETS")).get(os.environ.get("RUN_ID"))}\n')
        shell: python
        env:
          ALL_TEST_TARGETS: ${{ needs.splitter.outputs.targets }}
          WORKFLOW_ID: ${{ matrix.run-id }}

      - name: Run integration tests
        uses: ansible-network/github_actions/.github/actions/ansible_test_integration@main
        with:
          collection_path: ${{ steps.install-collection.outputs.collection_path }}
          python_version: "${{ env.python_version }}"
          ansible_version: ${{ env.ansible_version }}
          ansible_test_targets: ${{ steps.read-targets.outputs.ansible_test_targets }}
